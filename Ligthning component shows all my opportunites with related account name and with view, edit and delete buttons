// Ligthning component shows all my opportunites with related account name and with view, edit and delete buttons

<aura:component controller= "opplist" implements="flexipage:availableForAllPageTypes,flexipage:availableForRecordHome,force:hasRecordId" access="global" >    
     <aura:attribute type="Opportunity[]" name="oppList"/>
    <aura:attribute name="mycolumns" type="List"/>
    <aura:attribute name="sortedBy" type="String" default="Name"/>
    <aura:attribute name="sortedDirection" type="String" default="asc"/>  
    
    <aura:handler name="init" value="{!this}" action="{!c.doinit}"/>
    <div style="Height: 300px;">
    <lightning:datatable data="{!v.oppList}" 
                         columns="{!v.mycolumns}" 
                         keyField="id"
                         hideCheckboxColumn="true"
                         onsort="{!c.updateColumnSorting}"
                         sortedBy="{!v.sortedBy}"  
                         sortedDirection="{!v.sortedDirection}"
                         onrowaction="{!c.viewRecord}"/>                              
    </div>
</aura:component>

controller.JS

({
    doinit : function(component, event, helper) {
           component.set('v.mycolumns', [
            {label: 'Opportunity', fieldName: 'Name', type: 'text', sortable: true},
            {label: 'Account', fieldName: 'AccountName', type: 'text', sortable: true},
            {label: 'stage', fieldName: 'StageName', type: 'text', sortable: true},  
          	 {label: 'Close Date', fieldName: 'CloseDate', type: 'text', sortable: true},  
            {label: 'Amount', fieldName: 'Amount', type: 'text', sortable: true}, 
            {type: "button", typeAttributes: {
                label: 'View',
                name: 'View',
                title: 'View',
                disabled: false,
                value: 'view',
                iconPosition: 'center'
            }},
               
            {type: "button", typeAttributes: {
                label: 'Edit',
                name: 'Edit',
                title: 'Edit',
                disabled: false,
                value: 'edit',
               iconPosition: 'center'
            }},
               {type: "button", typeAttributes: {
                label: 'Delete',
                name: 'Delete',
                title: 'Delete',
                disabled: false,
                value: 'delete',
                iconPosition: 'center'
            }}
        ]);
        
        
        var action = component.get("c.fetchAccts");
        action.setCallback(this, function(response){
            var state = response.getState();
            if (state === "SUCCESS") {
            	var rows = response.getReturnValue();              
                for ( var i = 0; i < rows.length; i++ ) {                   
                    var row = rows[i];                   
                    if ( row.Account ) {
                        row.AccountName = row.Account.Name;
                    }                                                     
                }
                component.set("v.oppList", rows);
                helper.sortData(component, component.get("v.sortedBy"), component.get("v.sortedDirection"));
            }
        });
        $A.enqueueAction(action);
    },

        viewRecord : function(component, event, helper) {
        var recId = event.getParam('row').Id;
        var actionName = event.getParam('action').name;
        if ( actionName == 'Edit' ) {           
            var editRecordEvent = $A.get("e.force:editRecord");
            editRecordEvent.setParams({
                "recordId": recId
            });
            editRecordEvent.fire();
        }                                                         
         else if ( actionName == 'View') {          
            var viewRecordEvent = $A.get("e.force:navigateToURL");
            viewRecordEvent.setParams({
                "url": "/" + recId
            });
            viewRecordEvent.fire();
        } else if ( actionName == 'Delete')
        {		//alert(recId); 
            if(confirm('Are you sure?')){
                
             helper.deleteAccount(component, event);         
	
            }
        }
			                     
    },                      
    updateColumnSorting: function (cmp, event, helper) {
        var fieldName = event.getParam('fieldName');
        var sortDirection = event.getParam('sortDirection');
        cmp.set("v.sortedBy", fieldName);
        cmp.set("v.sortedDirection", sortDirection);
        helper.sortData(cmp, fieldName, sortDirection);
    }
})



helper.JS

({
    sortData: function (cmp, fieldName, sortDirection) {
        var data = cmp.get("v.oppList");
        var reverse = sortDirection !== 'asc';
        data.sort(this.sortBy(fieldName, reverse))
        cmp.set("v.oppList", data);
    },
    
    sortBy: function (field, reverse, primer) {
        var key = primer ?
            function(x) {return primer(x[field])} :
        function(x) {return x[field]};
        reverse = !reverse ? 1 : -1;
        return function (a, b) {
            return a = key(a), b = key(b), reverse * ((a > b) - (b > a));
        }
    },
    deleteAccount : function(component, event) {
	 var recId = event.getParam('row').Id;
      var action = component.get("c.deleteopportunity"); //Calling Apex Method
        action.setParams({recId:recId}); // Passing the Contact Record Id
		action.setCallback(this, function(response) {
            var state = response.getState();
            if (state === "SUCCESS"){
	//	component.set("v.oppList",response.getReturnValue());  
            var rows1 = response.getReturnValue();              
                for ( var i = 0; i < rows1.length; i++ ) {                   
                    var row1 = rows1[i];                   
                    if ( row1.Account ) {
                        row1.AccountName = row1.Account.Name;
                    }                                                     
                }
                component.set("v.oppList", rows1)          
        var toastEvent = $A.get("e.force:showToast");
        toastEvent.setParams({
        title : 'Success',
        message: 'Opportunity was deleted',
        duration:' 5000',
            key: 'info_alt',
            type: 'success',
            mode: 'pester'
        });
        toastEvent.fire();
            }
    
                //console.log(response.getReturnValue());
    });
	$A.enqueueAction(action);
	},
		
})

Apex class/****

public class opplist {
   
   @AuraEnabled
    public static List <Opportunity> fetchAccts() {
   //     Id userId =UserInfo.getUserId();
       list<opportunity> opps = new list<opportunity>([select Name, Account.Name, StageName,
                                                       CloseDate, Amount FROM opportunity Where OwnerId =: UserInfo.getUserId()]);
        return opps;
    }
    @AuraEnabled
	public static List<opportunity> deleteopportunity(String recId) {
        
		if(recId != null){
	opportunity delopp =[Select Id from Opportunity where id=:recId];
	delete delopp;
}
//Below Query is for after delete the record again we have reload the page and show the remaning opportunity
	return [Select Name, Account.Name, StageName, CloseDate, Amount FROM opportunity Where OwnerId =: UserInfo.getUserId()];
}

}
