

<template>

</template>

JS************************************************

import { LightningElement, api, wire } from 'lwc';
import { CurrentPageReference } from 'lightning/navigation';
import validateopps from '@salesforce/apex/GradiantAIController.validateopp';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';
import { getRecord } from 'lightning/uiRecordApi';
	
import { NavigationMixin } from 'lightning/navigation';

const FIELDS = ['Opportunity.Effective_Date__c'];
export default class GradiantLWC extends NavigationMixin(LightningElement) { 

    recordId;
    censusCount;
    effectiveDate;

    // connectedCallback() {
    //     //code
    //     console.log('recordid',this.recordId);
    // }


     @wire(getRecord, { recordId: '$recordId', fields: FIELDS })
    wiredRecord({ error, data }) {
        if (error) {
            console.log('error',error);
        } else if (data) {
           
            this.effectiveDate = data.fields.Effective_Date__c.value;
            
        }
    }
    @wire(CurrentPageReference)
    getPageReferenceParameters(currentPageReference) {
        if (currentPageReference) {
            console.log(currentPageReference);
            this.recordId = currentPageReference.state.c__recordId;
            console.log('recordid', this.recordId);
            this.validateopprecords();

        }

    }


    validateopprecords() {

        validateopps({ recId: this.recordId, effectiveDate:this.effectiveDate }).then(data => {
            // this.censusCount = data;
            // console.log('censusCount' + this.censusCount);
            // if (this.censusCount == 0) {
            //     this.showToast('Error', 'Please upload census records.', 'error');
            // }
            // else if (this.censusCount > 0 && this.censusCount < 5) {
            //     this.showToast('Error', 'Please upload more than 5 census records.', 'error');
            // }
            // else if (this.censusCount > 5000) {
            //     this.showToast('Error', 'Gradient AI cannot process more than 5000 records.', 'error');
            // }
           
            // let currentDate = new Date();
            // let givenDate = new Date(this.effectiveDate);

            // if(givenDate < currentDate){
            //      this.showToast('Error', 'Effective Date cannot be a date in the past.', 'error');
            // }
                   let response = data;

                   if(response=='Success'){

                        this.showToast('Success', 'Gradient AI api request was submitted successfully.', 'Success');
                   }
                   else if(response = 'Failed'){
                        this.showToast('Error', 'Gradient AI api request failed.Please try again.', 'error');
                   }
                   else{
                   console.log('censusCount' + data);
                    response.forEach(currentItem => {
                        this.showToast('Error', currentItem, 'error');
                    });
                   }

        });
        this[NavigationMixin.Navigate]({
            type: 'standard__recordPage',
            attributes: {
                recordId: this.recordId,
                objectApiName: 'Opportunity',
                actionName: 'view'
            },
        });


    }
    showToast(title, message, variant) {
        const event = new ShowToastEvent({
            title: title,
            message: message,
            variant: variant,
            mode: 'sticky'
        });
        this.dispatchEvent(event);
    }

}


*******************************************apexcontroller******************************************************


/**                                                             
*  this class used to send opportunity and related cesus records data to gradiant AI thorught API           
*/    
public class GradiantAIController {
    
    /**                                                             
*  wrapper class to generate Response body for API call out           
*/
    
    private class jobWrap{
        public String id {get; set;}  
        public String callbackURL {get; set;}
        
    }
    private class carrierWrap{
        public String id {get; set;}  
        public String name {get; set;}
    }
    private class peoWrap{
        public String id {get; set;}  
        public String name {get; set;}
        
    }
    private class worksiteEmployerWrap{
        public String id {get; set;}  
        public String name {get; set;}
        public String sicCode {get; set;}  
        public String zipCode {get; set;}
        public String state {get; set;}
    }
    private class proposalWrap{
        
        public String id {get; set;}  
        public String createdAt {get; set;}
        public Decimal coveredMemberCount {get; set;}  
        public String masterHealthPlan {get; set;}
        public String proposedEffectiveDate {get; set;}  
        public String upcomingRenewalDate {get; set;}
        public additionalInformationWrap additionalInformation {get; set;}  
        
    }
    private class additionalInformationWrap{
        public String currentMedicalCarrier {get; set;}  
        public Boolean isVirginGroup {get; set;}   
    }
    
    
    private class censusRecordWrap{
        public String id {get; set;}  
        public String firstName {get; set;}
        public String lastName {get; set;}  
        public String birthDate {get; set;}
        public String gender {get; set;} 
        public String coverageType {get; set;}   
        public String zipCode {get; set;}
        public String dependentType {get; set;}
        public Boolean isCobra {get; set;}
        public Boolean isEligible {get; set;}
        
        
    }
    private class RequestBodyMap {
        public jobWrap job {get; set;}
        public carrierWrap carrier {get; set;}
        public peoWrap peo {get; set;}
        public worksiteEmployerWrap worksiteEmployer {get; set;}
        public proposalWrap proposal {get; set;}
        public list<censusRecordWrap> censusRecords {get; set;}        
    }
    
    private class returnResponse{
        public Integer response {get; set;}  
        public List<string> errormsg {get; set;}
    }
    private class returnBody{
        public String requestId {get; set;}  
    }
    
    /**                                                             
*  Below method prepares the JSON Body Response and sending API call out to gradiant API 
*/  
    public static Integer gradiantAIapicallout(String oppId){
        
        Opportunity oppRecs = [select Id, account.Account_Record_Id__c, account.Name,account.Region__c,account.sic,
                               account.BillingAddress,account.BillingStreet,account.BillingCity,
                               account.BillingStateCode,account.BillingPostalCode,account.BillingCountry, 
                               account.FEIN__c,account.Primary_Telephone__c,CreatedById,CreatedDate, 
                               Enrolled_Members__c,Current_Health_Plan_Funding_Arrangement__c,
                               Effective_Date__c,CloseDate, Current_Stop_Loss_Carrier__r.Name,
                               (select id,Name,First_Name__c,Last_Name__c,Date_of_Birth__c,Gender__c,
                                Coverage_Tier_GradientAI__c,Home_Zip_Code__c, Relationship_to_Employee_GradientAI__c,
                                COBRA_Status_GradientAI__c from Census_Information__r)from Opportunity where Id =:oppId Limit 1];
        List<Census_Information__c> censuslist = oppRecs.Census_Information__r;
        
        /**
* Request Body
*/ 
        string callbackurl = System.URL.getSalesforceBaseURL().toExternalForm()+'/services/apexrest/gradiantAI/';
        jobWrap job = new jobWrap();
        job.id = oppRecs.Id !=null ? oppRecs.Id+'_'+System.today():'' ;
        job.callbackURL=callbackurl;
        
        carrierWrap carrier = new carrierWrap();
        carrier.id =oppRecs.account.Account_Record_Id__c != null ? oppRecs.account.Account_Record_Id__c:'';
        carrier.name= oppRecs.account.Name;
        
        peoWrap peo = new peoWrap();
        peo.id ='sbr'; // no mapping field in sheet, hardcoded from sheet value 
        peo.name='sbr'; // no mapping field in sheet, hardcoded from sheet value 
        
        worksiteEmployerWrap worksiteEmployer = new worksiteEmployerWrap();
        worksiteEmployer.id = oppRecs.account.Account_Record_Id__c != null ? oppRecs.account.Account_Record_Id__c:'';   
        worksiteEmployer.name= oppRecs.account.Name!= null ? oppRecs.account.Name:'';
        worksiteEmployer.sicCode = oppRecs.account.sic!=null ? oppRecs.account.sic:'';
        worksiteEmployer.zipCode=  oppRecs.account.BillingPostalCode != null ? oppRecs.account.BillingPostalCode:'' ; 
        worksiteEmployer.state = oppRecs.account.BillingStateCode !=null ? oppRecs.account.BillingStateCode:''; 
        
        additionalInformationWrap additionalInformation =  new additionalInformationWrap();
        additionalInformation.isVirginGroup = false; // no mapping field in sheet, accepts on boolean. hardcoded value as false. 
        additionalInformation.currentMedicalCarrier= oppRecs.Current_Stop_Loss_Carrier__r.Name!=null ? oppRecs.Current_Stop_Loss_Carrier__r.Name :'' ;
        
        proposalWrap proposal = new proposalWrap();
        proposal.additionalInformation = additionalInformation;
        proposal.id = oppRecs.Id !=null ? oppRecs.Id:'';   //'ce4f0a05-c45b-5b2f-a781-ddbfe2f272ce'; // no mapping field in sheet, hardcoded from sheet value 
        proposal.createdAt= string.valueOf(oppRecs.CreatedDate);
        proposal.coveredMemberCount =  oppRecs.Enrolled_Members__c;  
        proposal.masterHealthPlan= 'default';    // oppRecs.Current_Health_Plan_Funding_Arrangement__c is a picklist field and doesn't have default as value. it is accepting only default as value
        proposal.proposedEffectiveDate = string.valueOf(oppRecs.Effective_Date__c);
        proposal.upcomingRenewalDate= string.valueOf(oppRecs.CloseDate);
        
        list<censusRecordWrap> censusRecordwraplist = new list<censusRecordWrap>();
        for(Census_Information__c cif:censuslist ){
            censusRecordWrap censusRecords = new censusRecordWrap();
            censusRecords.id = cif.Name !=null ? cif.Name : '' ;
            censusRecords.firstName= cif.First_Name__c !=null ? cif.First_Name__c:'';
            censusRecords.lastName = cif.Last_Name__c!=null ? cif.Last_Name__c:'';
            censusRecords.birthDate= string.valueOf(cif.Date_of_Birth__c);
            if(cif.Gender__c=='Male'){
                censusRecords.gender = 'M';
            }else if(cif.Gender__c=='Female'){
                censusRecords.gender = 'F';
            }           
            censusRecords.coverageType = cif.Coverage_Tier_GradientAI__c;  //    // needs to confirm mapping  field value. it is accepting only  EE  or ES or EC or FAM value  
            censusRecords.zipCode= cif.Home_Zip_Code__c;
            censusRecords.dependentType = cif.Relationship_to_Employee_GradientAI__c.toUppercase();  
            censusRecords.isCobra= cif.COBRA_Status_GradientAI__c =='COBRA' ? true:false ; 
            censusRecords.isEligible = true ;          // needs to confirm this field and mapping field and this field is not there in maapping field list and this is mandatory field for api call
            censusRecordwraplist.add(censusRecords);
        }
        
        
        RequestBodyMap requestBody = new RequestBodyMap();      
        requestBody.job = job;
        requestBody.carrier = carrier;      
        requestBody.peo = peo;
        requestBody.worksiteEmployer = worksiteEmployer;      
        requestBody.proposal = proposal;
        requestBody.censusRecords = censusRecordwraplist;
        
        /**
* API CALL OUT
*/
        Integer returnresponse = 0;
        
        List<Quote_API__mdt> qtMDT = [SELECT BaseURL__c, Endpoint__c, x_api_key__c FROM Quote_API__mdt WHERE DeveloperName='Gradient_AI' LIMIT 1];
        
        if(!qtMDT.isEmpty()){
            Http h = new Http();
            HttpRequest request = new HttpRequest();
            request.setEndpoint(qtMDT[0].Endpoint__c);
            request.setMethod('POST');
            request.setHeader('x-api-key',qtMDT[0].x_api_key__c);
            request.setHeader('Content-Type','application/json');
            String requestBodyAWS = '';
            
            requestBodyAWS = JSON.serialize(requestBody);  
            system.debug('requestBodyAWS'+requestBodyAWS);     
            request.setBody(requestBodyAWS);
            HttpResponse response;
            try{
                response = h.send(request);
            }catch(Exception e){
                MDSLQuoteException.LogAPIException(e.getMessage(), oppRecs.Id, 'SF', 'Request Quote', 'GradiantAIController', 'gradiantAIapicallout', String.valueOf(response.getStatusCode()), true, e.getMessage(), 'SF to Gradiant AI callout failed! Please contact support.', '', null);
            }
            
            
            returnresponse = response.getStatusCode();
            string returnbody = response.getBody();
            //   list<string> requestid = response.getBody().split(',');
            System.debug('returnresponse1234'+returnbody);
            System.debug('returnresponsecode'+returnresponse);
            if(response.getStatusCode()==200||response.getStatusCode()==201 ||response.getStatusCode()==202){
                Map<String, Object> result = (Map<String, Object>) JSON.deserializeUntyped(response.getBody());
                if (result.containsKey('RequestID')) {
                    //TODO: verify request id for the request
                    String RequestID = (String)result.get('RequestID');
                    opportunity opp = new opportunity();
                    opp.Id= oppId;
                    opp.GradientAIRequestID__c=RequestID;
                    
                    Database.SaveResult oppResults = Database.update(opp,false);
                    sendCallbackNotificationlater(oppRecs.Id);
                    
                }
                
                createChatterFeed(UserInfo.getUserId(), 'Gradient AI api request was submitted successfully.' );          
            }
            else{
                createChatterFeed(UserInfo.getUserId(), 'Gradient AI api request failed.Please try again.' );
                MDSLQuoteException.LogAPIException(String.valueOf(request), oppRecs.Id, 'SF', 'Request Quote', 'GradiantAIController', 'gradiantAIapicallout', String.valueOf(response.getStatusCode()), true, String.valueOf(response), 'SF to Gradiant AI callout failed! Please contact support.', '', null);         
            }
            return returnresponse;
        }
        else{
            return returnresponse;
        }
    }
    
    /**                                                             
*  Below method is used to create chatter notification for the user  
*/
    public static void createChatterFeed(String userId, String bodymsg)
    {
        
        ConnectApi.MessageBodyInput messageInput = new ConnectApi.MessageBodyInput();
        messageInput.messageSegments = new List<ConnectApi.MessageSegmentInput>();
        
        ConnectApi.TextSegmentInput textSegment = new ConnectApi.TextSegmentInput();
        textSegment.text = bodymsg;
        messageInput.messageSegments.add(textSegment);     
        ConnectApi.FeedItemInput input = new ConnectApi.FeedItemInput();
        input.body = messageInput;
        input.subjectId = userId;
        ConnectApi.ChatterFeeds.postFeedElement(null, input);
    }
    
    
    
    /**                                                             
*  Below method called from lwc when click on button Run Gradiant AI  and valiate the entry criteria  
*/
    @AuraEnabled
    public static String validateopp(String recId, Date effectiveDate){
        try{
            List<string> errormsg = new list<string>(); 
            returnResponse retrnres = new returnResponse();
            List<Census_Information__c> censuslist = [select id from Census_Information__c where Opportunity__c =:recId];
            
            if(censuslist.size() == 0) {
                errormsg.add('Please upload census records.');
            }
            else if(censuslist.size() > 0 && censuslist.size() < 5) {
                errormsg.add('Please upload more than 5 census records.');
            }
            else if(censuslist.size() > 5000) {
                errormsg.add('Gradient AI cannot process more than 5000 records.');
            }
            
            if(effectiveDate < SYSTEM.TODAY() ){
                errormsg.add('Effective Date cannot be a date in the past.');
            }
            
            if(errormsg.isempty()){
                Integer returnResp =  gradiantAIapicallout(recId);
                retrnres.response = returnResp;
                retrnres.errormsg = new list<string>();
                return JSON.serialize(retrnres);
                
            }
            else{
                retrnres.response = 0;
                retrnres.errormsg = errormsg;
                return JSON.serialize(retrnres);
            }
        }
        catch(Exception e){
            //throw all other exception message
            throw new AuraHandledException(e.getMessage());
        }
        
    }
    // call the schedulable class after 15 mins and checks if gradiant Ai sent response back 
    public static void sendCallbackNotificationlater(String oppId){
        System.debug('startsceduleaction');
        DateTime scheduledTime = DateTime.now().addMinutes(2);
        String jobName = 'GradiantAIJob-'+oppId;
        List<CronTrigger> ctList = [select Id,CronJobDetailId,CronJobDetail.Name, NextFireTime,PreviousFireTime,State,StartTime,EndTime,CronExpression, TimeZoneSidKey,OwnerId,TimesTriggered from CronTrigger where CronJobDetail.Name =:jobName];
        if(ctList.isEmpty()){
            String cronExpression = '0 ' + scheduledTime.minute() + ' ' + scheduledTime.hour() + ' ' + scheduledTime.day() + ' ' + scheduledTime.month() + ' ? ' + scheduledTime.year();            
            System.schedule(jobName, cronExpression, new GradiantActionSchedulable(oppId));
        }
        
    } 
}


**********************************apexcallback*******************************************************************************************


@RestResource(urlMapping='/gradiantAI/')
global class gradiantAICallback{ 
   @httpPost
    global static string doPostMethod(String jobID, sailResultWrap sailResults, censusResultsWrap censusResults ){
        //  RestRequest req = RestContext.request;
        //  system.debug(req+ req);
        GradientAI_Results__c gaiRes = new GradientAI_Results__c();
        gaiRes.SAIL_Score__c = sailResults.score;
        gaiRes.Morbidity_Score__c = sailResults.morbidity;
        gaiRes.Census_Score__c = censusResults.score;
        insert gaiRes;
    list<Individual_Risk_Tier__c>individualRisklist = new list<Individual_Risk_Tier__c>();
    for(individualRiskTierWrap inrt: sailResults.breakdown.individualRiskTiers) {   
    Individual_Risk_Tier__c indRT= new Individual_Risk_Tier__c();
    indRT.LowerBound__c = inrt.lowerBound;
    indRT.UpperBound__c = inrt.upperBound;
    indRT.NumberOfIndividuals__c = inrt.numIndividuals;
    indRt.GradientAIResultID__c = gaiRes.Id;
    indRT.Range__c= inrt.rangeLabel;
     
         individualRisklist.add(indRT);
    }
     if(!individualRisklist.isEmpty()){
    insert individualRisklist;
    }
    list<Drug_Cost_Drivers__c>drugCostDriverslist = new list<Drug_Cost_Drivers__c>();  
     for(drugCostDriversWrap drgCost: sailResults.drugCostDrivers) {   
    Drug_Cost_Drivers__c dct = new Drug_Cost_Drivers__c();
    dct.Rank__c = drgCost.rank;
    dct.Year__c = drgCost.year;
    dct.Code__c = drgCost.code;
    dct.Type__c = drgCost.codeType;
    dct.Drug_Name__c = drgCost.name;
    dct.Drug_Class__c= drgCost.drugClass;
    dct.Unique_Member_ID__c= drgCost.uniqueMemberID;
    dct.GradientAI_Result_ID__c = gaiRes.Id;
  //  dct.Unique_Member_ID__c= inrt.highCostClaimantID;
     
         drugCostDriverslist.add(dct);
    }
    
    if(!drugCostDriverslist.isEmpty()){
    insert drugCostDriverslist;
    }
     list<ICD10_Triggers__c>icdTriggerslist = new list<ICD10_Triggers__c>();  
     for(icd10TriggersWrap icdtrig : sailResults.icd10Triggers) {   
    ICD10_Triggers__c icd = new ICD10_Triggers__c();
    icd.ICD10_Code__c = icdtrig.icd10;
    icd.ICD10_Description__c = icdtrig.description;
    icd.Year__c = icdtrig.year;
    icd.Unique_Member_ID__c = icdtrig.uniqueMemberID;
   // icd.Drug_Name__c = highCostClaimantID;
    icd.GradientAI_Result_ID__c = gaiRes.Id;   
         icdTriggerslist.add(icd);
    }
    if(!icdTriggerslist.isEmpty()){
    insert icdTriggerslist;
    }
       list<Predicted_High_Cost_Claimants__c>predHighCostlist = new list<Predicted_High_Cost_Claimants__c>();  
     for(highCostPredictionsWrap hcostp : sailResults.highCostPredictions) {   
    Predicted_High_Cost_Claimants__c hcp = new Predicted_High_Cost_Claimants__c();
    hcp.Predicted_High_Cost_Claimant_Amount__c = hcostp.predictionAmount;
    hcp.Unique_Member_ID__c = hcostp.uniqueMemberID;
   // icd.Year__c = icdtrig.highCostClaimantID;
    hcp.GradientAI_Result_ID__c = gaiRes.Id;   
         predHighCostlist.add(hcp);
    }
        

    if(!predHighCostlist.isEmpty()){
    insert predHighCostlist;
    }

    return 'sucesss';
}

   global class breakdownWrap{
       global list<individualRiskTierWrap> individualRiskTiers ;    
       
    }

     global class sailResultWrap {
        global Decimal score ;  
        global Decimal hitRate ;
        global Decimal morbidity ;
        global breakdownWrap breakdown ;
        global list<drugCostDriversWrap> drugCostDrivers;
        global list<icd10TriggersWrap> icd10Triggers;
        global list<highCostPredictionsWrap> highCostPredictions;
       
      
            
    }
     global class individualRiskTierWrap {
        global Decimal lowerBound ;  
        global Decimal upperBound ;
        global Integer numIndividuals ;
        global String rangeLabel ;
       
    }
     global class drugCostDriversWrap {
        global string condition; 
        global Integer rank ;  
        global String year ;
        global String code ;
        global String codeType ;
        global String name ;  
        global String drugClass ;
        global String uniqueMemberID ;
        global String highCostClaimantID ;
       
    }
    global class icd10TriggersWrap {
        global String icd10 ;  
        global String description ;
        global String year ;
        global String uniqueMemberID ;
        global String highCostClaimantID ;
       
    }
     global class highCostPredictionsWrap {
        global Double predictionAmount ;  
        global String uniqueMemberID ;
        global Integer highCostClaimantID ; 
    }
       global class censusResultsWrap {  
        global Decimal score ; 
    }
      global class requestBody {  
        global string jobID;
        global sailResultWrap sailResults;
        global censusResultsWrap censusResults;
    }
}



**********************************GradiantActionSchedulable******************************************************************************

// schedule class checks if gradiant AI sent response back to salesforce and creating MDSLQuoteException Log
public without sharing class GradiantActionSchedulable implements schedulable  {
    public String oppId;
    // constructor to store opportunity record     
    public GradiantActionSchedulable(String oppId) {
        this.oppId = oppId;
    }
    public void execute(schedulableContext context) {
        // This code will be executed after the specified delay
        System.debug('called from gradiantai'+oppId);
        String jobName = 'GradiantAIJob-'+oppId; 
        DateTime lastfifthnmin =Datetime.now().addMinutes(-15);
        List<GradientAI_Results__c> Grdiantreslst =  [select id from GradientAI_Results__c where CreatedDate > :lastfifthnmin];
        
        if(Grdiantreslst.isEmpty()){
            MDSLQuoteException.LogAPIException('Gradiant AI to Salesforce Repsonse not recevied!', oppId, 'SF', 'Request Quote', 'GradiantAIController', 'gradiantAIapicalloutCallback', 'Gradiant AI to Salesforce Repsonse not recevied!', true, '', 'Gradiant AI to SF repsonse not recevied! Please contact support.', '', null);
        }
        // get the exisitng schedule job
        CronTrigger ct = [select Id,CronJobDetailId,CronJobDetail.Name, NextFireTime,PreviousFireTime,State,StartTime,EndTime,CronExpression, TimeZoneSidKey,OwnerId,TimesTriggered from CronTrigger where CronJobDetail.Name =:jobName limit 1];
        //Abort job
        if(ct!=null){ 
        System.abortJob(ct.Id);
        }
        // for(CronTrigger ct:ctList){
        //     System.abortJob(ct.Id);
        // }
        
    }
}
